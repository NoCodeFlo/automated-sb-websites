{"version":3,"file":"index.d.ts","sources":["../src/sdk/v0.ts"],"sourcesContent":["import { createFetcher } from './core'\n\nexport type ChatDetail = {\n  id: string\n  object: 'chat'\n  shareable: boolean\n  privacy: 'public' | 'private' | 'team' | 'team-edit' | 'unlisted'\n  name?: string\n  /** @deprecated */\n  title?: string\n  createdAt: string\n  updatedAt?: string\n  favorite: boolean\n  authorId: string\n  projectId?: string\n  webUrl: string\n  apiUrl: string\n  latestVersion?: {\n    id: string\n    object: 'version'\n    status: 'pending' | 'completed' | 'failed'\n    demoUrl?: string\n    createdAt: string\n    updatedAt?: string\n    files: {\n      object: 'file'\n      name: string\n      content: string\n      locked: boolean\n    }[]\n  }\n  /** @deprecated */\n  url: string\n  messages: Array<{\n    id: string\n    object: 'message'\n    content: string\n    createdAt: string\n    updatedAt?: string\n    type:\n      | 'message'\n      | 'forked-block'\n      | 'forked-chat'\n      | 'open-in-v0'\n      | 'refinement'\n      | 'added-environment-variables'\n      | 'added-integration'\n      | 'deleted-file'\n      | 'moved-file'\n      | 'renamed-file'\n      | 'edited-file'\n      | 'replace-src'\n      | 'reverted-block'\n      | 'fix-with-v0'\n      | 'auto-fix-with-v0'\n      | 'sync-git'\n    role: 'user' | 'assistant'\n    apiUrl: string\n  }>\n  files?: {\n    lang: string\n    meta: Record<string, any>\n    source: string\n  }[]\n  /** @deprecated */\n  demo?: string\n  text: string\n  modelConfiguration?: {\n    modelId: 'v0-1.5-sm' | 'v0-1.5-md' | 'v0-1.5-lg' | 'v0-gpt-5'\n    imageGenerations?: boolean\n    thinking?: boolean\n  }\n}\n\nexport type ChatSummary = {\n  id: string\n  object: 'chat'\n  shareable: boolean\n  privacy: 'public' | 'private' | 'team' | 'team-edit' | 'unlisted'\n  name?: string\n  /** @deprecated */\n  title?: string\n  createdAt: string\n  updatedAt?: string\n  favorite: boolean\n  authorId: string\n  projectId?: string\n  webUrl: string\n  apiUrl: string\n  latestVersion?: {\n    id: string\n    object: 'version'\n    status: 'pending' | 'completed' | 'failed'\n    demoUrl?: string\n    createdAt: string\n    updatedAt?: string\n  }\n}\n\nexport interface DeploymentDetail {\n  id: string\n  object: 'deployment'\n  inspectorUrl: string\n  chatId: string\n  projectId: string\n  versionId: string\n  apiUrl: string\n  webUrl: string\n}\n\nexport interface DeploymentSummary {\n  id: string\n  object: 'deployment'\n  inspectorUrl: string\n  chatId: string\n  projectId: string\n  versionId: string\n  apiUrl: string\n  webUrl: string\n}\n\nexport interface EnvironmentVariableDetailSchema {\n  id: string\n  object: 'environment_variable'\n  key: string\n  value: string\n  decrypted: boolean\n  createdAt: number\n  updatedAt?: number\n}\n\nexport interface EnvironmentVariableSummarySchema {\n  id: string\n  object: 'environment_variable'\n  key: string\n  value: string\n  decrypted: boolean\n  createdAt: number\n  updatedAt?: number\n}\n\nexport interface EnvironmentVariablesListSchema {\n  object: 'list'\n  data: {\n    id: string\n    object: 'environment_variable'\n    key: string\n    value: string\n    decrypted: boolean\n    createdAt: number\n    updatedAt?: number\n  }[]\n}\n\nexport interface FileDetail {\n  object: 'file'\n  name: string\n  content: string\n  locked: boolean\n}\n\nexport interface FileSummary {\n  object: 'file'\n  name: string\n}\n\nexport type HookDetail = {\n  id: string\n  object: 'hook'\n  name: string\n  events: Array<\n    | 'chat.created'\n    | 'chat.updated'\n    | 'chat.deleted'\n    | 'message.created'\n    | 'message.updated'\n    | 'message.deleted'\n    | 'project.created'\n    | 'project.updated'\n    | 'project.deleted'\n  >\n  chatId?: string\n  projectId?: string\n  url: string\n}\n\nexport type HookEventDetail = {\n  id: string\n  object: 'hook_event'\n  event:\n    | 'chat.created'\n    | 'chat.updated'\n    | 'chat.deleted'\n    | 'message.created'\n    | 'message.updated'\n    | 'message.deleted'\n    | 'project.created'\n    | 'project.updated'\n    | 'project.deleted'\n  status?: 'pending' | 'success' | 'error'\n  createdAt: string\n}\n\nexport interface HookSummary {\n  id: string\n  object: 'hook'\n  name: string\n}\n\nexport type MessageDetail = {\n  id: string\n  object: 'message'\n  content: string\n  createdAt: string\n  updatedAt?: string\n  type:\n    | 'message'\n    | 'forked-block'\n    | 'forked-chat'\n    | 'open-in-v0'\n    | 'refinement'\n    | 'added-environment-variables'\n    | 'added-integration'\n    | 'deleted-file'\n    | 'moved-file'\n    | 'renamed-file'\n    | 'edited-file'\n    | 'replace-src'\n    | 'reverted-block'\n    | 'fix-with-v0'\n    | 'auto-fix-with-v0'\n    | 'sync-git'\n  role: 'user' | 'assistant'\n  apiUrl: string\n  chatId: string\n}\n\nexport type MessageSummary = {\n  id: string\n  object: 'message'\n  content: string\n  createdAt: string\n  updatedAt?: string\n  type:\n    | 'message'\n    | 'forked-block'\n    | 'forked-chat'\n    | 'open-in-v0'\n    | 'refinement'\n    | 'added-environment-variables'\n    | 'added-integration'\n    | 'deleted-file'\n    | 'moved-file'\n    | 'renamed-file'\n    | 'edited-file'\n    | 'replace-src'\n    | 'reverted-block'\n    | 'fix-with-v0'\n    | 'auto-fix-with-v0'\n    | 'sync-git'\n  role: 'user' | 'assistant'\n  apiUrl: string\n}\n\nexport type MessageSummaryList = {\n  object: 'list'\n  data: Array<{\n    id: string\n    object: 'message'\n    content: string\n    createdAt: string\n    updatedAt?: string\n    type:\n      | 'message'\n      | 'forked-block'\n      | 'forked-chat'\n      | 'open-in-v0'\n      | 'refinement'\n      | 'added-environment-variables'\n      | 'added-integration'\n      | 'deleted-file'\n      | 'moved-file'\n      | 'renamed-file'\n      | 'edited-file'\n      | 'replace-src'\n      | 'reverted-block'\n      | 'fix-with-v0'\n      | 'auto-fix-with-v0'\n      | 'sync-git'\n    role: 'user' | 'assistant'\n    apiUrl: string\n  }>\n  pagination: {\n    hasMore: boolean\n    nextCursor?: string\n    nextUrl?: string\n  }\n}\n\nexport type ProjectDetail = {\n  id: string\n  object: 'project'\n  name: string\n  privacy: 'private' | 'team'\n  vercelProjectId?: string\n  createdAt: string\n  updatedAt?: string\n  apiUrl: string\n  webUrl: string\n  description?: string\n  instructions?: string\n  chats: Array<{\n    id: string\n    object: 'chat'\n    shareable: boolean\n    privacy: 'public' | 'private' | 'team' | 'team-edit' | 'unlisted'\n    name?: string\n    /** @deprecated */\n    title?: string\n    createdAt: string\n    updatedAt?: string\n    favorite: boolean\n    authorId: string\n    projectId?: string\n    webUrl: string\n    apiUrl: string\n    latestVersion?: {\n      id: string\n      object: 'version'\n      status: 'pending' | 'completed' | 'failed'\n      demoUrl?: string\n      createdAt: string\n      updatedAt?: string\n    }\n  }>\n}\n\nexport type ProjectSummary = {\n  id: string\n  object: 'project'\n  name: string\n  privacy: 'private' | 'team'\n  vercelProjectId?: string\n  createdAt: string\n  updatedAt?: string\n  apiUrl: string\n  webUrl: string\n}\n\nexport interface ScopeSummary {\n  id: string\n  object: 'scope'\n  name?: string\n}\n\nexport type SearchResultItem = {\n  id: string\n  object: 'chat' | 'project'\n  name: string\n  createdAt: string\n  updatedAt?: string\n  apiUrl: string\n  webUrl: string\n}\n\nexport interface UserDetail {\n  id: string\n  object: 'user'\n  name?: string\n  email: string\n  avatar: string\n}\n\nexport interface VercelProjectDetail {\n  id: string\n  object: 'vercel_project'\n  name: string\n}\n\nexport interface VercelProjectSummary {\n  id: string\n  object: 'vercel_project'\n  name: string\n}\n\nexport type VersionDetail = {\n  id: string\n  object: 'version'\n  status: 'pending' | 'completed' | 'failed'\n  demoUrl?: string\n  createdAt: string\n  updatedAt?: string\n  files: {\n    object: 'file'\n    name: string\n    content: string\n    locked: boolean\n  }[]\n}\n\nexport type VersionSummary = {\n  id: string\n  object: 'version'\n  status: 'pending' | 'completed' | 'failed'\n  demoUrl?: string\n  createdAt: string\n  updatedAt?: string\n}\n\nexport type VersionSummaryList = {\n  object: 'list'\n  data: Array<{\n    id: string\n    object: 'version'\n    status: 'pending' | 'completed' | 'failed'\n    demoUrl?: string\n    createdAt: string\n    updatedAt?: string\n  }>\n  pagination: {\n    hasMore: boolean\n    nextCursor?: string\n    nextUrl?: string\n  }\n}\n\nexport interface ChatsCreateRequest {\n  message: string\n  attachments?: {\n    url: string\n  }[]\n  system?: string\n  chatPrivacy?: 'public' | 'private' | 'team-edit' | 'team' | 'unlisted'\n  projectId?: string\n  modelConfiguration?: {\n    modelId: 'v0-1.5-sm' | 'v0-1.5-md' | 'v0-1.5-lg' | 'v0-gpt-5'\n    imageGenerations?: boolean\n    thinking?: boolean\n  }\n  responseMode?: 'sync' | 'async'\n}\n\nexport type ChatsCreateResponse = ChatDetail\n\nexport interface ChatsFindResponse {\n  object: 'list'\n  data: ChatSummary[]\n}\n\nexport type ChatsInitRequest = {\n  name?: string\n  chatPrivacy?: 'public' | 'private' | 'team-edit' | 'team' | 'unlisted'\n  projectId?: string\n} & (\n  | {\n      type: 'files'\n      files: Array<\n        | {\n            name: string\n            url: string\n            locked?: boolean\n            content?: never\n          }\n        | {\n            name: string\n            content: string\n            locked?: boolean\n            url?: never\n          }\n      >\n      repo?: never\n      lockAllFiles?: never\n      registry?: never\n      zip?: never\n    }\n  | {\n      type: 'repo'\n      repo: {\n        url: string\n        branch?: string\n      }\n      lockAllFiles?: boolean\n      files?: never\n      registry?: never\n      zip?: never\n    }\n  | {\n      type: 'registry'\n      registry: {\n        url: string\n      }\n      lockAllFiles?: boolean\n      files?: never\n      repo?: never\n      zip?: never\n    }\n  | {\n      type: 'zip'\n      zip: {\n        url: string\n      }\n      lockAllFiles?: boolean\n      files?: never\n      repo?: never\n      registry?: never\n    }\n)\n\nexport type ChatsInitResponse = ChatDetail\n\nexport interface ChatsDeleteResponse {\n  id: string\n  object: 'chat'\n  deleted: true\n}\n\nexport type ChatsGetByIdResponse = ChatDetail\n\nexport interface ChatsUpdateRequest {\n  name?: string\n  privacy?: 'public' | 'private' | 'team' | 'team-edit' | 'unlisted'\n}\n\nexport type ChatsUpdateResponse = ChatDetail\n\nexport interface ChatsFavoriteRequest {\n  isFavorite: boolean\n}\n\nexport interface ChatsFavoriteResponse {\n  id: string\n  object: 'chat'\n  favorited: boolean\n}\n\nexport interface ChatsForkRequest {\n  versionId?: string\n}\n\nexport type ChatsForkResponse = ChatDetail\n\nexport type ProjectsGetByChatIdResponse = ProjectDetail\n\nexport interface ChatsFindMessagesResponse {\n  object: 'list'\n  data: MessageSummary[]\n  pagination: {\n    hasMore: boolean\n    nextCursor?: string\n    nextUrl?: string\n  }\n}\n\nexport interface ChatsSendMessageRequest {\n  message: string\n  attachments?: {\n    url: string\n  }[]\n  modelConfiguration?: {\n    modelId: 'v0-1.5-sm' | 'v0-1.5-md' | 'v0-1.5-lg' | 'v0-gpt-5'\n    imageGenerations?: boolean\n    thinking?: boolean\n  }\n  responseMode?: 'sync' | 'async'\n}\n\nexport type ChatsSendMessageResponse = ChatDetail\n\nexport type ChatsGetMessageResponse = MessageDetail\n\nexport interface ChatsFindVersionsResponse {\n  object: 'list'\n  data: VersionSummary[]\n  pagination: {\n    hasMore: boolean\n    nextCursor?: string\n    nextUrl?: string\n  }\n}\n\nexport type ChatsGetVersionResponse = VersionDetail\n\nexport interface ChatsUpdateVersionRequest {\n  files: {\n    name: string\n    content: string\n    locked?: boolean\n  }[]\n}\n\nexport type ChatsUpdateVersionResponse = VersionDetail\n\nexport type ChatsResumeResponse = MessageDetail\n\nexport interface DeploymentsFindResponse {\n  object: 'list'\n  data: DeploymentDetail[]\n}\n\nexport interface DeploymentsCreateRequest {\n  projectId: string\n  chatId: string\n  versionId: string\n}\n\nexport type DeploymentsCreateResponse = DeploymentDetail\n\nexport type DeploymentsGetByIdResponse = DeploymentDetail\n\nexport interface DeploymentsDeleteResponse {\n  id: string\n  object: 'deployment'\n  deleted: true\n}\n\nexport interface DeploymentsFindLogsResponse {\n  error?: string\n  logs: string[]\n  nextSince?: number\n}\n\nexport interface DeploymentsFindErrorsResponse {\n  error?: string\n  fullErrorText?: string\n  errorType?: string\n  formattedError?: string\n}\n\nexport interface HooksFindResponse {\n  object: 'list'\n  data: HookSummary[]\n}\n\nexport interface HooksCreateRequest {\n  name: string\n  events: Array<\n    | 'chat.created'\n    | 'chat.updated'\n    | 'chat.deleted'\n    | 'message.created'\n    | 'message.updated'\n    | 'message.deleted'\n    | 'project.created'\n    | 'project.updated'\n    | 'project.deleted'\n  >\n  chatId?: string\n  projectId?: string\n  url: string\n}\n\nexport type HooksCreateResponse = HookDetail\n\nexport type HooksGetByIdResponse = HookDetail\n\nexport interface HooksUpdateRequest {\n  name?: string\n  events?: Array<\n    | 'chat.created'\n    | 'chat.updated'\n    | 'chat.deleted'\n    | 'message.created'\n    | 'message.updated'\n    | 'message.deleted'\n    | 'project.created'\n    | 'project.updated'\n    | 'project.deleted'\n  >\n  url?: string\n}\n\nexport type HooksUpdateResponse = HookDetail\n\nexport interface HooksDeleteResponse {\n  id: string\n  object: 'hook'\n  deleted: true\n}\n\nexport interface IntegrationsVercelProjectsFindResponse {\n  object: 'list'\n  data: VercelProjectDetail[]\n}\n\nexport interface IntegrationsVercelProjectsCreateRequest {\n  projectId: string\n  name: string\n}\n\nexport type IntegrationsVercelProjectsCreateResponse = VercelProjectDetail\n\nexport interface ProjectsFindResponse {\n  object: 'list'\n  data: ProjectSummary[]\n}\n\nexport interface ProjectsCreateRequest {\n  name: string\n  description?: string\n  icon?: string\n  environmentVariables?: {\n    key: string\n    value: string\n  }[]\n  instructions?: string\n  vercelProjectId?: string\n  privacy?: 'private' | 'team'\n}\n\nexport type ProjectsCreateResponse = ProjectDetail\n\nexport type ProjectsGetByIdResponse = ProjectDetail\n\nexport interface ProjectsUpdateRequest {\n  name?: string\n  description?: string\n  instructions?: string\n  privacy?: 'private' | 'team'\n}\n\nexport type ProjectsUpdateResponse = ProjectDetail\n\nexport interface ProjectsAssignRequest {\n  chatId: string\n}\n\nexport interface ProjectsAssignResponse {\n  object: 'project'\n  id: string\n  assigned: true\n}\n\nexport interface ProjectsFindEnvVarsResponse {\n  object: 'list'\n  data: EnvironmentVariableSummarySchema[]\n}\n\nexport interface ProjectsCreateEnvVarsRequest {\n  environmentVariables: {\n    key: string\n    value: string\n  }[]\n  upsert?: boolean\n}\n\nexport interface ProjectsCreateEnvVarsResponse {\n  object: 'list'\n  data: EnvironmentVariableSummarySchema[]\n}\n\nexport interface ProjectsUpdateEnvVarsRequest {\n  environmentVariables: {\n    id: string\n    value: string\n  }[]\n}\n\nexport interface ProjectsUpdateEnvVarsResponse {\n  object: 'list'\n  data: EnvironmentVariableSummarySchema[]\n}\n\nexport interface ProjectsDeleteEnvVarsRequest {\n  environmentVariableIds: string[]\n}\n\nexport interface ProjectsDeleteEnvVarsResponse {\n  object: 'list'\n  data: {\n    id: string\n    object: 'environment_variable'\n    deleted: true\n  }[]\n}\n\nexport interface ProjectsGetEnvVarResponse {\n  object: 'environment_variable'\n  data: EnvironmentVariableDetailSchema\n}\n\nexport interface RateLimitsFindResponse {\n  remaining?: number\n  reset?: number\n  limit: number\n}\n\nexport type UserGetResponse = UserDetail\n\nexport type UserGetBillingResponse =\n  | {\n      billingType: 'token'\n      data: {\n        plan: string\n        billingMode?: 'test'\n        role: string\n        billingCycle: {\n          start: number\n          end: number\n        }\n        balance: {\n          remaining: number\n          total: number\n        }\n        onDemand: {\n          balance: number\n          blocks?: {\n            expirationDate?: number\n            effectiveDate: number\n            originalBalance: number\n            currentBalance: number\n          }[]\n        }\n      }\n    }\n  | {\n      billingType: 'legacy'\n      data: {\n        remaining?: number\n        reset?: number\n        limit: number\n      }\n    }\n\nexport interface UserGetPlanResponse {\n  object: 'plan'\n  plan: string\n  billingCycle: {\n    start: number\n    end: number\n  }\n  balance: {\n    remaining: number\n    total: number\n  }\n}\n\nexport interface UserGetScopesResponse {\n  object: 'list'\n  data: ScopeSummary[]\n}\n\nexport interface V0ClientConfig {\n  apiKey?: string\n  baseUrl?: string\n}\n\nexport function createClient(config: V0ClientConfig = {}) {\n  const fetcher = createFetcher(config)\n\n  return {\n    chats: {\n      async create(params: ChatsCreateRequest): Promise<ChatsCreateResponse> {\n        const body = {\n          message: params.message,\n          attachments: params.attachments,\n          system: params.system,\n          chatPrivacy: params.chatPrivacy,\n          projectId: params.projectId,\n          modelConfiguration: params.modelConfiguration,\n          responseMode: params.responseMode,\n        }\n        return fetcher(`/chats`, 'POST', { body })\n      },\n\n      async find(params?: {\n        limit?: string\n        offset?: string\n        isFavorite?: string\n      }): Promise<ChatsFindResponse> {\n        const query = params\n          ? (Object.fromEntries(\n              Object.entries({\n                limit: params.limit,\n                offset: params.offset,\n                isFavorite: params.isFavorite,\n              }).filter(([_, value]) => value !== undefined),\n            ) as Record<string, string>)\n          : {}\n        const hasQuery = Object.keys(query).length > 0\n        return fetcher(`/chats`, 'GET', { ...(hasQuery ? { query } : {}) })\n      },\n\n      async init(params: ChatsInitRequest): Promise<ChatsInitResponse> {\n        const body = params\n        return fetcher(`/chats/init`, 'POST', { body })\n      },\n\n      async delete(params: { chatId: string }): Promise<ChatsDeleteResponse> {\n        const pathParams = { chatId: params.chatId }\n        return fetcher(`/chats/${pathParams.chatId}`, 'DELETE', { pathParams })\n      },\n\n      async getById(params: { chatId: string }): Promise<ChatsGetByIdResponse> {\n        const pathParams = { chatId: params.chatId }\n        return fetcher(`/chats/${pathParams.chatId}`, 'GET', { pathParams })\n      },\n\n      async update(\n        params: { chatId: string } & ChatsUpdateRequest,\n      ): Promise<ChatsUpdateResponse> {\n        const pathParams = { chatId: params.chatId }\n        const body = { name: params.name, privacy: params.privacy }\n        return fetcher(`/chats/${pathParams.chatId}`, 'PATCH', {\n          pathParams,\n          body,\n        })\n      },\n\n      async favorite(\n        params: { chatId: string } & ChatsFavoriteRequest,\n      ): Promise<ChatsFavoriteResponse> {\n        const pathParams = { chatId: params.chatId }\n        const body = { isFavorite: params.isFavorite }\n        return fetcher(`/chats/${pathParams.chatId}/favorite`, 'PUT', {\n          pathParams,\n          body,\n        })\n      },\n\n      async fork(\n        params: { chatId: string } & ChatsForkRequest,\n      ): Promise<ChatsForkResponse> {\n        const pathParams = { chatId: params.chatId }\n        const body = { versionId: params.versionId }\n        return fetcher(`/chats/${pathParams.chatId}/fork`, 'POST', {\n          pathParams,\n          body,\n        })\n      },\n\n      async findMessages(params: {\n        chatId: string\n        limit?: string\n        cursor?: string\n      }): Promise<ChatsFindMessagesResponse> {\n        const pathParams = { chatId: params.chatId }\n        const query = Object.fromEntries(\n          Object.entries({\n            limit: params.limit,\n            cursor: params.cursor,\n          }).filter(([_, value]) => value !== undefined),\n        ) as Record<string, string>\n        const hasQuery = Object.keys(query).length > 0\n        return fetcher(`/chats/${pathParams.chatId}/messages`, 'GET', {\n          pathParams,\n          ...(hasQuery ? { query } : {}),\n        })\n      },\n\n      async sendMessage(\n        params: { chatId: string } & ChatsSendMessageRequest,\n      ): Promise<ChatsSendMessageResponse> {\n        const pathParams = { chatId: params.chatId }\n        const body = {\n          message: params.message,\n          attachments: params.attachments,\n          modelConfiguration: params.modelConfiguration,\n          responseMode: params.responseMode,\n        }\n        return fetcher(`/chats/${pathParams.chatId}/messages`, 'POST', {\n          pathParams,\n          body,\n        })\n      },\n\n      async getMessage(params: {\n        chatId: string\n        messageId: string\n      }): Promise<ChatsGetMessageResponse> {\n        const pathParams = {\n          chatId: params.chatId,\n          messageId: params.messageId,\n        }\n        return fetcher(\n          `/chats/${pathParams.chatId}/messages/${pathParams.messageId}`,\n          'GET',\n          { pathParams },\n        )\n      },\n\n      async findVersions(params: {\n        chatId: string\n        limit?: string\n        cursor?: string\n      }): Promise<ChatsFindVersionsResponse> {\n        const pathParams = { chatId: params.chatId }\n        const query = Object.fromEntries(\n          Object.entries({\n            limit: params.limit,\n            cursor: params.cursor,\n          }).filter(([_, value]) => value !== undefined),\n        ) as Record<string, string>\n        const hasQuery = Object.keys(query).length > 0\n        return fetcher(`/chats/${pathParams.chatId}/versions`, 'GET', {\n          pathParams,\n          ...(hasQuery ? { query } : {}),\n        })\n      },\n\n      async getVersion(params: {\n        chatId: string\n        versionId: string\n      }): Promise<ChatsGetVersionResponse> {\n        const pathParams = {\n          chatId: params.chatId,\n          versionId: params.versionId,\n        }\n        return fetcher(\n          `/chats/${pathParams.chatId}/versions/${pathParams.versionId}`,\n          'GET',\n          { pathParams },\n        )\n      },\n\n      async updateVersion(\n        params: {\n          chatId: string\n          versionId: string\n        } & ChatsUpdateVersionRequest,\n      ): Promise<ChatsUpdateVersionResponse> {\n        const pathParams = {\n          chatId: params.chatId,\n          versionId: params.versionId,\n        }\n        const body = { files: params.files }\n        return fetcher(\n          `/chats/${pathParams.chatId}/versions/${pathParams.versionId}`,\n          'PATCH',\n          { pathParams, body },\n        )\n      },\n\n      async resume(params: {\n        chatId: string\n        messageId: string\n      }): Promise<ChatsResumeResponse> {\n        const pathParams = {\n          chatId: params.chatId,\n          messageId: params.messageId,\n        }\n        return fetcher(\n          `/chats/${pathParams.chatId}/messages/${pathParams.messageId}/resume`,\n          'POST',\n          { pathParams },\n        )\n      },\n    },\n\n    projects: {\n      async getByChatId(params: {\n        chatId: string\n      }): Promise<ProjectsGetByChatIdResponse> {\n        const pathParams = { chatId: params.chatId }\n        return fetcher(`/chats/${pathParams.chatId}/project`, 'GET', {\n          pathParams,\n        })\n      },\n\n      async find(): Promise<ProjectsFindResponse> {\n        return fetcher(`/projects`, 'GET', {})\n      },\n\n      async create(\n        params: ProjectsCreateRequest,\n      ): Promise<ProjectsCreateResponse> {\n        const body = {\n          name: params.name,\n          description: params.description,\n          icon: params.icon,\n          environmentVariables: params.environmentVariables,\n          instructions: params.instructions,\n          vercelProjectId: params.vercelProjectId,\n          privacy: params.privacy,\n        }\n        return fetcher(`/projects`, 'POST', { body })\n      },\n\n      async getById(params: {\n        projectId: string\n      }): Promise<ProjectsGetByIdResponse> {\n        const pathParams = { projectId: params.projectId }\n        return fetcher(`/projects/${pathParams.projectId}`, 'GET', {\n          pathParams,\n        })\n      },\n\n      async update(\n        params: { projectId: string } & ProjectsUpdateRequest,\n      ): Promise<ProjectsUpdateResponse> {\n        const pathParams = { projectId: params.projectId }\n        const body = {\n          name: params.name,\n          description: params.description,\n          instructions: params.instructions,\n          privacy: params.privacy,\n        }\n        return fetcher(`/projects/${pathParams.projectId}`, 'PATCH', {\n          pathParams,\n          body,\n        })\n      },\n\n      async assign(\n        params: { projectId: string } & ProjectsAssignRequest,\n      ): Promise<ProjectsAssignResponse> {\n        const pathParams = { projectId: params.projectId }\n        const body = { chatId: params.chatId }\n        return fetcher(`/projects/${pathParams.projectId}/assign`, 'POST', {\n          pathParams,\n          body,\n        })\n      },\n\n      async findEnvVars(params: {\n        projectId: string\n        decrypted?: string\n      }): Promise<ProjectsFindEnvVarsResponse> {\n        const pathParams = { projectId: params.projectId }\n        const query = Object.fromEntries(\n          Object.entries({\n            decrypted: params.decrypted,\n          }).filter(([_, value]) => value !== undefined),\n        ) as Record<string, string>\n        const hasQuery = Object.keys(query).length > 0\n        return fetcher(`/projects/${pathParams.projectId}/env-vars`, 'GET', {\n          pathParams,\n          ...(hasQuery ? { query } : {}),\n        })\n      },\n\n      async createEnvVars(\n        params: {\n          projectId: string\n          decrypted?: string\n        } & ProjectsCreateEnvVarsRequest,\n      ): Promise<ProjectsCreateEnvVarsResponse> {\n        const pathParams = { projectId: params.projectId }\n        const query = Object.fromEntries(\n          Object.entries({\n            decrypted: params.decrypted,\n          }).filter(([_, value]) => value !== undefined),\n        ) as Record<string, string>\n        const body = {\n          environmentVariables: params.environmentVariables,\n          upsert: params.upsert,\n        }\n        const hasQuery = Object.keys(query).length > 0\n        return fetcher(`/projects/${pathParams.projectId}/env-vars`, 'POST', {\n          pathParams,\n          ...(hasQuery ? { query } : {}),\n          body,\n        })\n      },\n\n      async updateEnvVars(\n        params: {\n          projectId: string\n          decrypted?: string\n        } & ProjectsUpdateEnvVarsRequest,\n      ): Promise<ProjectsUpdateEnvVarsResponse> {\n        const pathParams = { projectId: params.projectId }\n        const query = Object.fromEntries(\n          Object.entries({\n            decrypted: params.decrypted,\n          }).filter(([_, value]) => value !== undefined),\n        ) as Record<string, string>\n        const body = { environmentVariables: params.environmentVariables }\n        const hasQuery = Object.keys(query).length > 0\n        return fetcher(`/projects/${pathParams.projectId}/env-vars`, 'PATCH', {\n          pathParams,\n          ...(hasQuery ? { query } : {}),\n          body,\n        })\n      },\n\n      async deleteEnvVars(\n        params: { projectId: string } & ProjectsDeleteEnvVarsRequest,\n      ): Promise<ProjectsDeleteEnvVarsResponse> {\n        const pathParams = { projectId: params.projectId }\n        const body = { environmentVariableIds: params.environmentVariableIds }\n        return fetcher(\n          `/projects/${pathParams.projectId}/env-vars/delete`,\n          'POST',\n          { pathParams, body },\n        )\n      },\n\n      async getEnvVar(params: {\n        projectId: string\n        environmentVariableId: string\n        decrypted?: string\n      }): Promise<ProjectsGetEnvVarResponse> {\n        const pathParams = {\n          projectId: params.projectId,\n          environmentVariableId: params.environmentVariableId,\n        }\n        const query = Object.fromEntries(\n          Object.entries({\n            decrypted: params.decrypted,\n          }).filter(([_, value]) => value !== undefined),\n        ) as Record<string, string>\n        const hasQuery = Object.keys(query).length > 0\n        return fetcher(\n          `/projects/${pathParams.projectId}/env-vars/${pathParams.environmentVariableId}`,\n          'GET',\n          { pathParams, ...(hasQuery ? { query } : {}) },\n        )\n      },\n    },\n\n    deployments: {\n      async find(params: {\n        projectId: string\n        chatId: string\n        versionId: string\n      }): Promise<DeploymentsFindResponse> {\n        const query = Object.fromEntries(\n          Object.entries({\n            projectId: params.projectId,\n            chatId: params.chatId,\n            versionId: params.versionId,\n          }).filter(([_, value]) => value !== undefined),\n        ) as Record<string, string>\n        return fetcher(`/deployments`, 'GET', { query })\n      },\n\n      async create(\n        params: DeploymentsCreateRequest,\n      ): Promise<DeploymentsCreateResponse> {\n        const body = {\n          projectId: params.projectId,\n          chatId: params.chatId,\n          versionId: params.versionId,\n        }\n        return fetcher(`/deployments`, 'POST', { body })\n      },\n\n      async getById(params: {\n        deploymentId: string\n      }): Promise<DeploymentsGetByIdResponse> {\n        const pathParams = { deploymentId: params.deploymentId }\n        return fetcher(`/deployments/${pathParams.deploymentId}`, 'GET', {\n          pathParams,\n        })\n      },\n\n      async delete(params: {\n        deploymentId: string\n      }): Promise<DeploymentsDeleteResponse> {\n        const pathParams = { deploymentId: params.deploymentId }\n        return fetcher(`/deployments/${pathParams.deploymentId}`, 'DELETE', {\n          pathParams,\n        })\n      },\n\n      async findLogs(params: {\n        deploymentId: string\n        since?: string\n      }): Promise<DeploymentsFindLogsResponse> {\n        const pathParams = { deploymentId: params.deploymentId }\n        const query = Object.fromEntries(\n          Object.entries({\n            since: params.since,\n          }).filter(([_, value]) => value !== undefined),\n        ) as Record<string, string>\n        const hasQuery = Object.keys(query).length > 0\n        return fetcher(`/deployments/${pathParams.deploymentId}/logs`, 'GET', {\n          pathParams,\n          ...(hasQuery ? { query } : {}),\n        })\n      },\n\n      async findErrors(params: {\n        deploymentId: string\n      }): Promise<DeploymentsFindErrorsResponse> {\n        const pathParams = { deploymentId: params.deploymentId }\n        return fetcher(\n          `/deployments/${pathParams.deploymentId}/errors`,\n          'GET',\n          { pathParams },\n        )\n      },\n    },\n\n    hooks: {\n      async find(): Promise<HooksFindResponse> {\n        return fetcher(`/hooks`, 'GET', {})\n      },\n\n      async create(params: HooksCreateRequest): Promise<HooksCreateResponse> {\n        const body = {\n          name: params.name,\n          events: params.events,\n          chatId: params.chatId,\n          projectId: params.projectId,\n          url: params.url,\n        }\n        return fetcher(`/hooks`, 'POST', { body })\n      },\n\n      async getById(params: { hookId: string }): Promise<HooksGetByIdResponse> {\n        const pathParams = { hookId: params.hookId }\n        return fetcher(`/hooks/${pathParams.hookId}`, 'GET', { pathParams })\n      },\n\n      async update(\n        params: { hookId: string } & HooksUpdateRequest,\n      ): Promise<HooksUpdateResponse> {\n        const pathParams = { hookId: params.hookId }\n        const body = {\n          name: params.name,\n          events: params.events,\n          url: params.url,\n        }\n        return fetcher(`/hooks/${pathParams.hookId}`, 'PATCH', {\n          pathParams,\n          body,\n        })\n      },\n\n      async delete(params: { hookId: string }): Promise<HooksDeleteResponse> {\n        const pathParams = { hookId: params.hookId }\n        return fetcher(`/hooks/${pathParams.hookId}`, 'DELETE', { pathParams })\n      },\n    },\n\n    integrations: {\n      vercel: {\n        projects: {\n          async find(): Promise<IntegrationsVercelProjectsFindResponse> {\n            return fetcher(`/integrations/vercel/projects`, 'GET', {})\n          },\n\n          async create(\n            params: IntegrationsVercelProjectsCreateRequest,\n          ): Promise<IntegrationsVercelProjectsCreateResponse> {\n            const body = { projectId: params.projectId, name: params.name }\n            return fetcher(`/integrations/vercel/projects`, 'POST', { body })\n          },\n        },\n      },\n    },\n\n    rateLimits: {\n      async find(params?: { scope?: string }): Promise<RateLimitsFindResponse> {\n        const query = params\n          ? (Object.fromEntries(\n              Object.entries({\n                scope: params.scope,\n              }).filter(([_, value]) => value !== undefined),\n            ) as Record<string, string>)\n          : {}\n        const hasQuery = Object.keys(query).length > 0\n        return fetcher(`/rate-limits`, 'GET', {\n          ...(hasQuery ? { query } : {}),\n        })\n      },\n    },\n\n    user: {\n      async get(): Promise<UserGetResponse> {\n        return fetcher(`/user`, 'GET', {})\n      },\n\n      async getBilling(params?: {\n        scope?: string\n      }): Promise<UserGetBillingResponse> {\n        const query = params\n          ? (Object.fromEntries(\n              Object.entries({\n                scope: params.scope,\n              }).filter(([_, value]) => value !== undefined),\n            ) as Record<string, string>)\n          : {}\n        const hasQuery = Object.keys(query).length > 0\n        return fetcher(`/user/billing`, 'GET', {\n          ...(hasQuery ? { query } : {}),\n        })\n      },\n\n      async getPlan(): Promise<UserGetPlanResponse> {\n        return fetcher(`/user/plan`, 'GET', {})\n      },\n\n      async getScopes(): Promise<UserGetScopesResponse> {\n        return fetcher(`/user/scopes`, 'GET', {})\n      },\n    },\n  }\n}\n\n// Default client for backward compatibility\nexport const v0 = createClient()\n"],"names":[],"mappings}